// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package storage

import (
	"context"
)

const addLunchRecord = `-- name: AddLunchRecord :exec
INSERT INTO lunches (date, user_id, verb, count, participants) 
VALUES (?, ?, ?, ?, ?)
`

type AddLunchRecordParams struct {
	Date         string
	UserID       string
	Verb         string
	Count        int64
	Participants string
}

func (q *Queries) AddLunchRecord(ctx context.Context, arg AddLunchRecordParams) error {
	_, err := q.db.ExecContext(ctx, addLunchRecord,
		arg.Date,
		arg.UserID,
		arg.Verb,
		arg.Count,
		arg.Participants,
	)
	return err
}

const addVacationRecord = `-- name: AddVacationRecord :exec
INSERT INTO vacations (user_id, date_from, date_to) 
VALUES (?, ?, ?)
`

type AddVacationRecordParams struct {
	UserID   string
	DateFrom string
	DateTo   string
}

func (q *Queries) AddVacationRecord(ctx context.Context, arg AddVacationRecordParams) error {
	_, err := q.db.ExecContext(ctx, addVacationRecord, arg.UserID, arg.DateFrom, arg.DateTo)
	return err
}

const addWfhRecord = `-- name: AddWfhRecord :exec
INSERT INTO wfh (user_id, date) 
VALUES (?, ?)
`

type AddWfhRecordParams struct {
	UserID string
	Date   string
}

func (q *Queries) AddWfhRecord(ctx context.Context, arg AddWfhRecordParams) error {
	_, err := q.db.ExecContext(ctx, addWfhRecord, arg.UserID, arg.Date)
	return err
}

const getLunchRecordsForDate = `-- name: GetLunchRecordsForDate :many
SELECT id, date, user_id, verb, count, participants, created_at 
FROM lunches 
WHERE date = ?
`

func (q *Queries) GetLunchRecordsForDate(ctx context.Context, date string) ([]Lunch, error) {
	rows, err := q.db.QueryContext(ctx, getLunchRecordsForDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lunch
	for rows.Next() {
		var i Lunch
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.UserID,
			&i.Verb,
			&i.Count,
			&i.Participants,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVacationCountForDate = `-- name: GetVacationCountForDate :one
SELECT COUNT(*) as count
FROM vacations 
WHERE date_from <= ? AND date_to >= ?
`

type GetVacationCountForDateParams struct {
	DateFrom string
	DateTo   string
}

func (q *Queries) GetVacationCountForDate(ctx context.Context, arg GetVacationCountForDateParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getVacationCountForDate, arg.DateFrom, arg.DateTo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getVacationsForDate = `-- name: GetVacationsForDate :many
SELECT user_id
FROM vacations 
WHERE date_from <= ? AND date_to >= ?
`

type GetVacationsForDateParams struct {
	DateFrom string
	DateTo   string
}

func (q *Queries) GetVacationsForDate(ctx context.Context, arg GetVacationsForDateParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getVacationsForDate, arg.DateFrom, arg.DateTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWfhForDate = `-- name: GetWfhForDate :many
SELECT user_id
FROM wfh 
WHERE date = ?
`

func (q *Queries) GetWfhForDate(ctx context.Context, date string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getWfhForDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
